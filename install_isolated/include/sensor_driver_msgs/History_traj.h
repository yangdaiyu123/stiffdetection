// Generated by gencpp from file sensor_driver_msgs/History_traj.msg
// DO NOT EDIT!


#ifndef SENSOR_DRIVER_MSGS_MESSAGE_HISTORY_TRAJ_H
#define SENSOR_DRIVER_MSGS_MESSAGE_HISTORY_TRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_driver_msgs/Points.h>
#include <sensor_driver_msgs/Points.h>

namespace sensor_driver_msgs
{
template <class ContainerAllocator>
struct History_traj_
{
  typedef History_traj_<ContainerAllocator> Type;

  History_traj_()
    : time_stamp(0.0)
    , line_num(0)
    , line_point()
    , center_point()  {
    }
  History_traj_(const ContainerAllocator& _alloc)
    : time_stamp(0.0)
    , line_num(0)
    , line_point(_alloc)
    , center_point(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _line_num_type;
  _line_num_type line_num;

   typedef std::vector< ::sensor_driver_msgs::Points_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_driver_msgs::Points_<ContainerAllocator> >::other >  _line_point_type;
  _line_point_type line_point;

   typedef  ::sensor_driver_msgs::Points_<ContainerAllocator>  _center_point_type;
  _center_point_type center_point;




  typedef boost::shared_ptr< ::sensor_driver_msgs::History_traj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_driver_msgs::History_traj_<ContainerAllocator> const> ConstPtr;

}; // struct History_traj_

typedef ::sensor_driver_msgs::History_traj_<std::allocator<void> > History_traj;

typedef boost::shared_ptr< ::sensor_driver_msgs::History_traj > History_trajPtr;
typedef boost::shared_ptr< ::sensor_driver_msgs::History_traj const> History_trajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_driver_msgs::History_traj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sensor_driver_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'sensor_driver_msgs': ['/home/zx/CODE/ws0214/src/sensor_driver/sensor_driver_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_driver_msgs::History_traj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_driver_msgs::History_traj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_driver_msgs::History_traj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75726c9405694c920b00351cd5eee0e3";
  }

  static const char* value(const ::sensor_driver_msgs::History_traj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75726c9405694c92ULL;
  static const uint64_t static_value2 = 0x0b00351cd5eee0e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_driver_msgs/History_traj";
  }

  static const char* value(const ::sensor_driver_msgs::History_traj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "    float64 time_stamp\n\
    int32 line_num\n\
    Points[] line_point\n\
    Points center_point\n\
\n\
================================================================================\n\
MSG: sensor_driver_msgs/Points\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::sensor_driver_msgs::History_traj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.line_num);
      stream.next(m.line_point);
      stream.next(m.center_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct History_traj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_driver_msgs::History_traj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_driver_msgs::History_traj_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "line_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.line_num);
    s << indent << "line_point[]" << std::endl;
    for (size_t i = 0; i < v.line_point.size(); ++i)
    {
      s << indent << "  line_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_driver_msgs::Points_<ContainerAllocator> >::stream(s, indent + "    ", v.line_point[i]);
    }
    s << indent << "center_point: ";
    s << std::endl;
    Printer< ::sensor_driver_msgs::Points_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_DRIVER_MSGS_MESSAGE_HISTORY_TRAJ_H
