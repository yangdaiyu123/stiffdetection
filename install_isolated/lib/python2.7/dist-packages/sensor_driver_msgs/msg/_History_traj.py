# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_driver_msgs/History_traj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_driver_msgs.msg

class History_traj(genpy.Message):
  _md5sum = "75726c9405694c920b00351cd5eee0e3"
  _type = "sensor_driver_msgs/History_traj"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """    float64 time_stamp
    int32 line_num
    Points[] line_point
    Points center_point

================================================================================
MSG: sensor_driver_msgs/Points
float64 x
float64 y
float64 z
"""
  __slots__ = ['time_stamp','line_num','line_point','center_point']
  _slot_types = ['float64','int32','sensor_driver_msgs/Points[]','sensor_driver_msgs/Points']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_stamp,line_num,line_point,center_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(History_traj, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_stamp is None:
        self.time_stamp = 0.
      if self.line_num is None:
        self.line_num = 0
      if self.line_point is None:
        self.line_point = []
      if self.center_point is None:
        self.center_point = sensor_driver_msgs.msg.Points()
    else:
      self.time_stamp = 0.
      self.line_num = 0
      self.line_point = []
      self.center_point = sensor_driver_msgs.msg.Points()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_di().pack(_x.time_stamp, _x.line_num))
      length = len(self.line_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3d().pack(_x.center_point.x, _x.center_point.y, _x.center_point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.line_point is None:
        self.line_point = None
      if self.center_point is None:
        self.center_point = sensor_driver_msgs.msg.Points()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.time_stamp, _x.line_num,) = _get_struct_di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_point = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.Points()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.line_point.append(val1)
      _x = self
      start = end
      end += 24
      (_x.center_point.x, _x.center_point.y, _x.center_point.z,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_di().pack(_x.time_stamp, _x.line_num))
      length = len(self.line_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3d().pack(_x.center_point.x, _x.center_point.y, _x.center_point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.line_point is None:
        self.line_point = None
      if self.center_point is None:
        self.center_point = sensor_driver_msgs.msg.Points()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.time_stamp, _x.line_num,) = _get_struct_di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_point = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.Points()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.line_point.append(val1)
      _x = self
      start = end
      end += 24
      (_x.center_point.x, _x.center_point.y, _x.center_point.z,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_di = None
def _get_struct_di():
    global _struct_di
    if _struct_di is None:
        _struct_di = struct.Struct("<di")
    return _struct_di
