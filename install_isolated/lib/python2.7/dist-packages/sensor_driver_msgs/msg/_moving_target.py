# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_driver_msgs/moving_target.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_driver_msgs.msg

class moving_target(genpy.Message):
  _md5sum = "bd64b47561f1a3a021fb713900f96bd2"
  _type = "sensor_driver_msgs/moving_target"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """    int32 line_num
    Points[] line_point
    Points center_point
    float32 object_high
    int32 object_type
    int32 ID_number
    bool is_updated
    int32  tracked_times
    int32  dangerous_level
    int32  history_num
    History_traj[] history_traj
    int32  predict_num
    Predict_traj[] predict_traj       

================================================================================
MSG: sensor_driver_msgs/Points
float64 x
float64 y
float64 z

================================================================================
MSG: sensor_driver_msgs/History_traj
    float64 time_stamp
    int32 line_num
    Points[] line_point
    Points center_point

================================================================================
MSG: sensor_driver_msgs/Predict_traj
    float64 time_stamp
    Points point
    float32 v_x
    float32 v_y
    float32 acc_x
    float32 acc_y
    float32 pos_head
    float32 v_w
    int16 confidence_level
"""
  __slots__ = ['line_num','line_point','center_point','object_high','object_type','ID_number','is_updated','tracked_times','dangerous_level','history_num','history_traj','predict_num','predict_traj']
  _slot_types = ['int32','sensor_driver_msgs/Points[]','sensor_driver_msgs/Points','float32','int32','int32','bool','int32','int32','int32','sensor_driver_msgs/History_traj[]','int32','sensor_driver_msgs/Predict_traj[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       line_num,line_point,center_point,object_high,object_type,ID_number,is_updated,tracked_times,dangerous_level,history_num,history_traj,predict_num,predict_traj

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(moving_target, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.line_num is None:
        self.line_num = 0
      if self.line_point is None:
        self.line_point = []
      if self.center_point is None:
        self.center_point = sensor_driver_msgs.msg.Points()
      if self.object_high is None:
        self.object_high = 0.
      if self.object_type is None:
        self.object_type = 0
      if self.ID_number is None:
        self.ID_number = 0
      if self.is_updated is None:
        self.is_updated = False
      if self.tracked_times is None:
        self.tracked_times = 0
      if self.dangerous_level is None:
        self.dangerous_level = 0
      if self.history_num is None:
        self.history_num = 0
      if self.history_traj is None:
        self.history_traj = []
      if self.predict_num is None:
        self.predict_num = 0
      if self.predict_traj is None:
        self.predict_traj = []
    else:
      self.line_num = 0
      self.line_point = []
      self.center_point = sensor_driver_msgs.msg.Points()
      self.object_high = 0.
      self.object_type = 0
      self.ID_number = 0
      self.is_updated = False
      self.tracked_times = 0
      self.dangerous_level = 0
      self.history_num = 0
      self.history_traj = []
      self.predict_num = 0
      self.predict_traj = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.line_num))
      length = len(self.line_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3df2iB3i().pack(_x.center_point.x, _x.center_point.y, _x.center_point.z, _x.object_high, _x.object_type, _x.ID_number, _x.is_updated, _x.tracked_times, _x.dangerous_level, _x.history_num))
      length = len(self.history_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.history_traj:
        _x = val1
        buff.write(_get_struct_di().pack(_x.time_stamp, _x.line_num))
        length = len(val1.line_point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.line_point:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v1 = val1.center_point
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_i().pack(self.predict_num))
      length = len(self.predict_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.predict_traj:
        buff.write(_get_struct_d().pack(val1.time_stamp))
        _v2 = val1.point
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_6fh().pack(_x.v_x, _x.v_y, _x.acc_x, _x.acc_y, _x.pos_head, _x.v_w, _x.confidence_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.line_point is None:
        self.line_point = None
      if self.center_point is None:
        self.center_point = sensor_driver_msgs.msg.Points()
      if self.history_traj is None:
        self.history_traj = None
      if self.predict_traj is None:
        self.predict_traj = None
      end = 0
      start = end
      end += 4
      (self.line_num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_point = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.Points()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.line_point.append(val1)
      _x = self
      start = end
      end += 49
      (_x.center_point.x, _x.center_point.y, _x.center_point.z, _x.object_high, _x.object_type, _x.ID_number, _x.is_updated, _x.tracked_times, _x.dangerous_level, _x.history_num,) = _get_struct_3df2iB3i().unpack(str[start:end])
      self.is_updated = bool(self.is_updated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.history_traj = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.History_traj()
        _x = val1
        start = end
        end += 12
        (_x.time_stamp, _x.line_num,) = _get_struct_di().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.line_point = []
        for i in range(0, length):
          val2 = sensor_driver_msgs.msg.Points()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.line_point.append(val2)
        _v3 = val1.center_point
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.history_traj.append(val1)
      start = end
      end += 4
      (self.predict_num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.predict_traj = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.Predict_traj()
        start = end
        end += 8
        (val1.time_stamp,) = _get_struct_d().unpack(str[start:end])
        _v4 = val1.point
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 26
        (_x.v_x, _x.v_y, _x.acc_x, _x.acc_y, _x.pos_head, _x.v_w, _x.confidence_level,) = _get_struct_6fh().unpack(str[start:end])
        self.predict_traj.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.line_num))
      length = len(self.line_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3df2iB3i().pack(_x.center_point.x, _x.center_point.y, _x.center_point.z, _x.object_high, _x.object_type, _x.ID_number, _x.is_updated, _x.tracked_times, _x.dangerous_level, _x.history_num))
      length = len(self.history_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.history_traj:
        _x = val1
        buff.write(_get_struct_di().pack(_x.time_stamp, _x.line_num))
        length = len(val1.line_point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.line_point:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.center_point
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_i().pack(self.predict_num))
      length = len(self.predict_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.predict_traj:
        buff.write(_get_struct_d().pack(val1.time_stamp))
        _v6 = val1.point
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_6fh().pack(_x.v_x, _x.v_y, _x.acc_x, _x.acc_y, _x.pos_head, _x.v_w, _x.confidence_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.line_point is None:
        self.line_point = None
      if self.center_point is None:
        self.center_point = sensor_driver_msgs.msg.Points()
      if self.history_traj is None:
        self.history_traj = None
      if self.predict_traj is None:
        self.predict_traj = None
      end = 0
      start = end
      end += 4
      (self.line_num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_point = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.Points()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.line_point.append(val1)
      _x = self
      start = end
      end += 49
      (_x.center_point.x, _x.center_point.y, _x.center_point.z, _x.object_high, _x.object_type, _x.ID_number, _x.is_updated, _x.tracked_times, _x.dangerous_level, _x.history_num,) = _get_struct_3df2iB3i().unpack(str[start:end])
      self.is_updated = bool(self.is_updated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.history_traj = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.History_traj()
        _x = val1
        start = end
        end += 12
        (_x.time_stamp, _x.line_num,) = _get_struct_di().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.line_point = []
        for i in range(0, length):
          val2 = sensor_driver_msgs.msg.Points()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.line_point.append(val2)
        _v7 = val1.center_point
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.history_traj.append(val1)
      start = end
      end += 4
      (self.predict_num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.predict_traj = []
      for i in range(0, length):
        val1 = sensor_driver_msgs.msg.Predict_traj()
        start = end
        end += 8
        (val1.time_stamp,) = _get_struct_d().unpack(str[start:end])
        _v8 = val1.point
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 26
        (_x.v_x, _x.v_y, _x.acc_x, _x.acc_y, _x.pos_head, _x.v_w, _x.confidence_level,) = _get_struct_6fh().unpack(str[start:end])
        self.predict_traj.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_6fh = None
def _get_struct_6fh():
    global _struct_6fh
    if _struct_6fh is None:
        _struct_6fh = struct.Struct("<6fh")
    return _struct_6fh
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_di = None
def _get_struct_di():
    global _struct_di
    if _struct_di is None:
        _struct_di = struct.Struct("<di")
    return _struct_di
_struct_3df2iB3i = None
def _get_struct_3df2iB3i():
    global _struct_3df2iB3i
    if _struct_3df2iB3i is None:
        _struct_3df2iB3i = struct.Struct("<3df2iB3i")
    return _struct_3df2iB3i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
