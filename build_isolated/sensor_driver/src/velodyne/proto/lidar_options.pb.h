// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/velodyne/proto/lidar_options.proto

#ifndef PROTOBUF_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto__INCLUDED
#define PROTOBUF_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lidar {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto();
void protobuf_AssignDesc_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto();
void protobuf_ShutdownFile_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto();

class LidarOptions;

// ===================================================================

class LidarOptions : public ::google::protobuf::Message {
 public:
  LidarOptions();
  virtual ~LidarOptions();

  LidarOptions(const LidarOptions& from);

  inline LidarOptions& operator=(const LidarOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarOptions& default_instance();

  void Swap(LidarOptions* other);

  // implements Message ----------------------------------------------

  LidarOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LidarOptions& from);
  void MergeFrom(const LidarOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional double x_offset = 3;
  inline bool has_x_offset() const;
  inline void clear_x_offset();
  static const int kXOffsetFieldNumber = 3;
  inline double x_offset() const;
  inline void set_x_offset(double value);

  // optional double y_offset = 5;
  inline bool has_y_offset() const;
  inline void clear_y_offset();
  static const int kYOffsetFieldNumber = 5;
  inline double y_offset() const;
  inline void set_y_offset(double value);

  // optional double z_offset = 6;
  inline bool has_z_offset() const;
  inline void clear_z_offset();
  static const int kZOffsetFieldNumber = 6;
  inline double z_offset() const;
  inline void set_z_offset(double value);

  // optional double x_angle = 7;
  inline bool has_x_angle() const;
  inline void clear_x_angle();
  static const int kXAngleFieldNumber = 7;
  inline double x_angle() const;
  inline void set_x_angle(double value);

  // optional double y_angle = 8;
  inline bool has_y_angle() const;
  inline void clear_y_angle();
  static const int kYAngleFieldNumber = 8;
  inline double y_angle() const;
  inline void set_y_angle(double value);

  // optional double z_angle = 9;
  inline bool has_z_angle() const;
  inline void clear_z_angle();
  static const int kZAngleFieldNumber = 9;
  inline double z_angle() const;
  inline void set_z_angle(double value);

  // optional double lasernum = 10;
  inline bool has_lasernum() const;
  inline void clear_lasernum();
  static const int kLasernumFieldNumber = 10;
  inline double lasernum() const;
  inline void set_lasernum(double value);

  // @@protoc_insertion_point(class_scope:lidar.proto.LidarOptions)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_x_offset();
  inline void clear_has_x_offset();
  inline void set_has_y_offset();
  inline void clear_has_y_offset();
  inline void set_has_z_offset();
  inline void clear_has_z_offset();
  inline void set_has_x_angle();
  inline void clear_has_x_angle();
  inline void set_has_y_angle();
  inline void clear_has_y_angle();
  inline void set_has_z_angle();
  inline void clear_has_z_angle();
  inline void set_has_lasernum();
  inline void clear_has_lasernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  double x_offset_;
  double y_offset_;
  double z_offset_;
  double x_angle_;
  double y_angle_;
  double z_angle_;
  double lasernum_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto();
  friend void protobuf_AssignDesc_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto();
  friend void protobuf_ShutdownFile_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto();

  void InitAsDefaultInstance();
  static LidarOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// LidarOptions

// optional string ip = 1;
inline bool LidarOptions::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarOptions::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarOptions::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarOptions::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& LidarOptions::ip() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.ip)
  return *ip_;
}
inline void LidarOptions::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.ip)
}
inline void LidarOptions::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:lidar.proto.LidarOptions.ip)
}
inline void LidarOptions::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lidar.proto.LidarOptions.ip)
}
inline ::std::string* LidarOptions::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lidar.proto.LidarOptions.ip)
  return ip_;
}
inline ::std::string* LidarOptions::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LidarOptions::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lidar.proto.LidarOptions.ip)
}

// optional int32 port = 2;
inline bool LidarOptions::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarOptions::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarOptions::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarOptions::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 LidarOptions::port() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.port)
  return port_;
}
inline void LidarOptions::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.port)
}

// optional double x_offset = 3;
inline bool LidarOptions::has_x_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LidarOptions::set_has_x_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LidarOptions::clear_has_x_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LidarOptions::clear_x_offset() {
  x_offset_ = 0;
  clear_has_x_offset();
}
inline double LidarOptions::x_offset() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.x_offset)
  return x_offset_;
}
inline void LidarOptions::set_x_offset(double value) {
  set_has_x_offset();
  x_offset_ = value;
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.x_offset)
}

// optional double y_offset = 5;
inline bool LidarOptions::has_y_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LidarOptions::set_has_y_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LidarOptions::clear_has_y_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LidarOptions::clear_y_offset() {
  y_offset_ = 0;
  clear_has_y_offset();
}
inline double LidarOptions::y_offset() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.y_offset)
  return y_offset_;
}
inline void LidarOptions::set_y_offset(double value) {
  set_has_y_offset();
  y_offset_ = value;
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.y_offset)
}

// optional double z_offset = 6;
inline bool LidarOptions::has_z_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LidarOptions::set_has_z_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LidarOptions::clear_has_z_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LidarOptions::clear_z_offset() {
  z_offset_ = 0;
  clear_has_z_offset();
}
inline double LidarOptions::z_offset() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.z_offset)
  return z_offset_;
}
inline void LidarOptions::set_z_offset(double value) {
  set_has_z_offset();
  z_offset_ = value;
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.z_offset)
}

// optional double x_angle = 7;
inline bool LidarOptions::has_x_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LidarOptions::set_has_x_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LidarOptions::clear_has_x_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LidarOptions::clear_x_angle() {
  x_angle_ = 0;
  clear_has_x_angle();
}
inline double LidarOptions::x_angle() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.x_angle)
  return x_angle_;
}
inline void LidarOptions::set_x_angle(double value) {
  set_has_x_angle();
  x_angle_ = value;
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.x_angle)
}

// optional double y_angle = 8;
inline bool LidarOptions::has_y_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LidarOptions::set_has_y_angle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LidarOptions::clear_has_y_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LidarOptions::clear_y_angle() {
  y_angle_ = 0;
  clear_has_y_angle();
}
inline double LidarOptions::y_angle() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.y_angle)
  return y_angle_;
}
inline void LidarOptions::set_y_angle(double value) {
  set_has_y_angle();
  y_angle_ = value;
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.y_angle)
}

// optional double z_angle = 9;
inline bool LidarOptions::has_z_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LidarOptions::set_has_z_angle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LidarOptions::clear_has_z_angle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LidarOptions::clear_z_angle() {
  z_angle_ = 0;
  clear_has_z_angle();
}
inline double LidarOptions::z_angle() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.z_angle)
  return z_angle_;
}
inline void LidarOptions::set_z_angle(double value) {
  set_has_z_angle();
  z_angle_ = value;
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.z_angle)
}

// optional double lasernum = 10;
inline bool LidarOptions::has_lasernum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LidarOptions::set_has_lasernum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LidarOptions::clear_has_lasernum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LidarOptions::clear_lasernum() {
  lasernum_ = 0;
  clear_has_lasernum();
}
inline double LidarOptions::lasernum() const {
  // @@protoc_insertion_point(field_get:lidar.proto.LidarOptions.lasernum)
  return lasernum_;
}
inline void LidarOptions::set_lasernum(double value) {
  set_has_lasernum();
  lasernum_ = value;
  // @@protoc_insertion_point(field_set:lidar.proto.LidarOptions.lasernum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace lidar

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2fvelodyne_2fproto_2flidar_5foptions_2eproto__INCLUDED
